classdef H8 < ParentElement
    
        properties
        
        connections = [2 4 5;...
                       1 3 6;...
                       2 4 7;...
                       1 3 8;...
                       1 6 8;...
                       2 5 7;...
                       3 6 8;...
                       4 5 7]; % array mapping connected nodes (8 x 3 ARRAY of INTs)
                   
        end
    
    methods
        
        function obj = H8()
            
            obj@ParentElement();
            tmp = sqrt(1/3); % integration point temp constant (FLOAT)
            obj.intpnts = [-tmp,-tmp,-tmp;...
                            tmp,-tmp,-tmp;...
                            tmp, tmp,-tmp;...
                           -tmp, tmp,-tmp;...
                           -tmp,-tmp, tmp;...
                            tmp,-tmp, tmp;...
                            tmp, tmp, tmp;...
                           -tmp, tmp, tmp]; % Gauss integration points (8 x 3 ARRAY of FLOATS)
            obj.Lintpnts = [-1,-1,-1;...
                             1,-1,-1;...
                             1, 1,-1;...
                            -1, 1,-1;...
                            -1,-1, 1;...
                             1,-1, 1;...
                             1, 1, 1;...
                            -1, 1, 1]; % Lobatto integration points (8 x 3 ARRAY of FLOATS)
            obj.w = ones(8,1); % Gauss integration weights (8 x 1 VECTOR of FLOATS)
            obj.Lw = ones(8,1); % Lobatto integration weights (8 x 1 VECTOR of FLOATS)
            obj = obj.shapeFunctions;
            
        end % Constructor
        
        function obj = shapeFunctions(obj)
            
            obj.N = cell(8,1); % initialize shap function cell (8 x 1 ARRAY of 8 x 1 ARRAYS of FLOATS)
            Nm = cell(8,1); % initialize shape function cell for mass matrix (8 x 1 ARRAY of 8 x 1 ARRAYS of FLOATS)
            obj.dN = cell(8,1); % initalize shape function derivatives cell (8 x 1 ARRAY of 3 x 8 ARRAYS of FLOATS)
            obj.NMatrix = cell(8,1); % initialize shape function cell for mass matrix creation (8 x 1 ARRAY of 3 x 24 MATRICES of FLOATS)
            
            for i = 1:8
            
                obj.N{i} = .125*[(1-obj.intpnts(i,1))*(1-obj.intpnts(i,2))*(1-obj.intpnts(i,3)),...
                                 (1+obj.intpnts(i,1))*(1-obj.intpnts(i,2))*(1-obj.intpnts(i,3)),...
                                 (1+obj.intpnts(i,1))*(1+obj.intpnts(i,2))*(1-obj.intpnts(i,3)),... 
                                 (1-obj.intpnts(i,1))*(1+obj.intpnts(i,2))*(1-obj.intpnts(i,3)),...
                                 (1-obj.intpnts(i,1))*(1-obj.intpnts(i,2))*(1+obj.intpnts(i,3)),...
                                 (1+obj.intpnts(i,1))*(1-obj.intpnts(i,2))*(1+obj.intpnts(i,3)),...
                                 (1+obj.intpnts(i,1))*(1+obj.intpnts(i,2))*(1+obj.intpnts(i,3)),...
                                 (1-obj.intpnts(i,1))*(1+obj.intpnts(i,2))*(1+obj.intpnts(i,3))]; % Shape functions for trilinear hexahedrons
                Nm{i} = .125*[(1-obj.Lintpnts(i,1))*(1-obj.Lintpnts(i,2))*(1-obj.Lintpnts(i,3)),...
                              (1+obj.Lintpnts(i,1))*(1-obj.Lintpnts(i,2))*(1-obj.Lintpnts(i,3)),...
                              (1+obj.Lintpnts(i,1))*(1+obj.Lintpnts(i,2))*(1-obj.Lintpnts(i,3)),... 
                              (1-obj.Lintpnts(i,1))*(1+obj.Lintpnts(i,2))*(1-obj.Lintpnts(i,3)),...
                              (1-obj.Lintpnts(i,1))*(1-obj.Lintpnts(i,2))*(1+obj.Lintpnts(i,3)),...
                              (1+obj.Lintpnts(i,1))*(1-obj.Lintpnts(i,2))*(1+obj.Lintpnts(i,3)),...
                              (1+obj.Lintpnts(i,1))*(1+obj.Lintpnts(i,2))*(1+obj.Lintpnts(i,3)),...
                              (1-obj.Lintpnts(i,1))*(1+obj.Lintpnts(i,2))*(1+obj.Lintpnts(i,3))]; % Shape functions for trilinear hexahedrons at Lobatto integration points                             
                             
                obj.NMatrix{i} = zeros(3,24);    
                    
                obj.NMatrix{i}(:,1:3) = Nm{i}(1)*eye(3);
                obj.NMatrix{i}(:,4:6) = Nm{i}(2)*eye(3);
                obj.NMatrix{i}(:,7:9) = Nm{i}(3)*eye(3);
                obj.NMatrix{i}(:,10:12) = Nm{i}(4)*eye(3);
                obj.NMatrix{i}(:,13:15) = Nm{i}(5)*eye(3);
                obj.NMatrix{i}(:,16:18) = Nm{i}(6)*eye(3);
                obj.NMatrix{i}(:,19:21) = Nm{i}(7)*eye(3);
                obj.NMatrix{i}(:,22:24) = Nm{i}(8)*eye(3);

                obj.dN{i} = .125*[-(1-obj.intpnts(i,2))*(1-obj.intpnts(i,3)),...
                                   (1-obj.intpnts(i,2))*(1-obj.intpnts(i,3)),...
                                   (1+obj.intpnts(i,2))*(1-obj.intpnts(i,3)),...
                                  -(1+obj.intpnts(i,2))*(1-obj.intpnts(i,3)),...
                                  -(1-obj.intpnts(i,2))*(1+obj.intpnts(i,3)),...
                                   (1-obj.intpnts(i,2))*(1+obj.intpnts(i,3)),...
                                   (1+obj.intpnts(i,2))*(1+obj.intpnts(i,3)),...
                                  -(1+obj.intpnts(i,2))*(1+obj.intpnts(i,3));... % Derivative wrt xi
                                  -(1-obj.intpnts(i,1))*(1-obj.intpnts(i,3)),...
                                  -(1+obj.intpnts(i,1))*(1-obj.intpnts(i,3)),...
                                   (1+obj.intpnts(i,1))*(1-obj.intpnts(i,3)),...
                                   (1-obj.intpnts(i,1))*(1-obj.intpnts(i,3)),...
                                  -(1-obj.intpnts(i,1))*(1+obj.intpnts(i,3)),...
                                  -(1+obj.intpnts(i,1))*(1+obj.intpnts(i,3)),...
                                   (1+obj.intpnts(i,1))*(1+obj.intpnts(i,3)),...
                                   (1-obj.intpnts(i,1))*(1+obj.intpnts(i,3));... % Derivative wrt eta                                  
                                  -(1-obj.intpnts(i,1))*(1-obj.intpnts(i,2)),...
                                  -(1+obj.intpnts(i,1))*(1-obj.intpnts(i,2)),...
                                  -(1+obj.intpnts(i,1))*(1+obj.intpnts(i,2)),...
                                  -(1-obj.intpnts(i,1))*(1+obj.intpnts(i,2)),...
                                   (1-obj.intpnts(i,1))*(1-obj.intpnts(i,2)),...
                                   (1+obj.intpnts(i,1))*(1-obj.intpnts(i,2)),...
                                   (1+obj.intpnts(i,1))*(1+obj.intpnts(i,2)),...
                                   (1-obj.intpnts(i,1))*(1+obj.intpnts(i,2))];   % Derivative wrt zeta
                    
            end
            
        end % Solve shape functions at integration points for each node        

        
    end
    
end    